using System;

namespace jHackson.StarOcean.Compression
{
    // Golomb-Code Decoder
    internal class SDD1_GCD
    {
        private readonly SDD1_IM IM;

        public SDD1_GCD(SDD1_IM associatedIM)
        {
            this.IM = associatedIM;
        }

        public void GetRunCount(byte code_num, ref byte MPScount, ref bool LPSind)
        {
            byte[] run_count = new byte[]
            {
                0x00, 0x00, 0x01, 0x00, 0x03, 0x01, 0x02, 0x00,
                0x07, 0x03, 0x05, 0x01, 0x06, 0x02, 0x04, 0x00,
                0x0f, 0x07, 0x0b, 0x03, 0x0d, 0x05, 0x09, 0x01,
                0x0e, 0x06, 0x0a, 0x02, 0x0c, 0x04, 0x08, 0x00,
                0x1f, 0x0f, 0x17, 0x07, 0x1b, 0x0b, 0x13, 0x03,
                0x1d, 0x0d, 0x15, 0x05, 0x19, 0x09, 0x11, 0x01,
                0x1e, 0x0e, 0x16, 0x06, 0x1a, 0x0a, 0x12, 0x02,
                0x1c, 0x0c, 0x14, 0x04, 0x18, 0x08, 0x10, 0x00,
                0x3f, 0x1f, 0x2f, 0x0f, 0x37, 0x17, 0x27, 0x07,
                0x3b, 0x1b, 0x2b, 0x0b, 0x33, 0x13, 0x23, 0x03,
                0x3d, 0x1d, 0x2d, 0x0d, 0x35, 0x15, 0x25, 0x05,
                0x39, 0x19, 0x29, 0x09, 0x31, 0x11, 0x21, 0x01,
                0x3e, 0x1e, 0x2e, 0x0e, 0x36, 0x16, 0x26, 0x06,
                0x3a, 0x1a, 0x2a, 0x0a, 0x32, 0x12, 0x22, 0x02,
                0x3c, 0x1c, 0x2c, 0x0c, 0x34, 0x14, 0x24, 0x04,
                0x38, 0x18, 0x28, 0x08, 0x30, 0x10, 0x20, 0x00,
                0x7f, 0x3f, 0x5f, 0x1f, 0x6f, 0x2f, 0x4f, 0x0f,
                0x77, 0x37, 0x57, 0x17, 0x67, 0x27, 0x47, 0x07,
                0x7b, 0x3b, 0x5b, 0x1b, 0x6b, 0x2b, 0x4b, 0x0b,
                0x73, 0x33, 0x53, 0x13, 0x63, 0x23, 0x43, 0x03,
                0x7d, 0x3d, 0x5d, 0x1d, 0x6d, 0x2d, 0x4d, 0x0d,
                0x75, 0x35, 0x55, 0x15, 0x65, 0x25, 0x45, 0x05,
                0x79, 0x39, 0x59, 0x19, 0x69, 0x29, 0x49, 0x09,
                0x71, 0x31, 0x51, 0x11, 0x61, 0x21, 0x41, 0x01,
                0x7e, 0x3e, 0x5e, 0x1e, 0x6e, 0x2e, 0x4e, 0x0e,
                0x76, 0x36, 0x56, 0x16, 0x66, 0x26, 0x46, 0x06,
                0x7a, 0x3a, 0x5a, 0x1a, 0x6a, 0x2a, 0x4a, 0x0a,
                0x72, 0x32, 0x52, 0x12, 0x62, 0x22, 0x42, 0x02,
                0x7c, 0x3c, 0x5c, 0x1c, 0x6c, 0x2c, 0x4c, 0x0c,
                0x74, 0x34, 0x54, 0x14, 0x64, 0x24, 0x44, 0x04,
                0x78, 0x38, 0x58, 0x18, 0x68, 0x28, 0x48, 0x08,
                0x70, 0x30, 0x50, 0x10, 0x60, 0x20, 0x40, 0x00,
            };

            byte codeword = this.IM.GetCodeword(code_num);

            if ((codeword & 0x80) == 0x80)
            {
                LPSind = true;
                MPScount = run_count[codeword >> (code_num ^ 0x07)];
            }
            else
                MPScount = Convert.ToByte(1 << code_num);
        }
    }
}